{
	// Place your tt-webinar-2020-openapi workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Add swagger security": {
		"scope": "csharp",
		"prefix": "swaggersecurity",
		"body": [
			"#region AuthN & AuthZ",
			"c.AddSecurityDefinition(\"oauth2\", new OpenApiSecurityScheme()",
			"{",
			"\tType = SecuritySchemeType.OAuth2,",
			"\tName = \"Authorization\",",
			"\tIn = ParameterLocation.Header,",
			"\tScheme = \"Bearer\",",
			"\tOpenIdConnectUrl = new Uri(\"https://demo.identityserver.io\"),",
			"\tFlows = new OpenApiOAuthFlows()",
			"\t{",
			"\t\tAuthorizationCode = new OpenApiOAuthFlow()",
			"\t\t{",
			"\t\t\tAuthorizationUrl = new Uri(\"https://demo.identityserver.io/connect/authorize\"),",
			"\t\t\tTokenUrl = new Uri(\"https://demo.identityserver.io/connect/token\"),",
			"\t\t\tScopes = new Dictionary<string, string>()",
			"\t\t\t{",
			"\t\t\t\t{ \"api\", \"API Access\" },",
			"\t\t\t},",
			"\t\t},",
			"\t},",
			"});",
			"#endregion",
		]
	},
	"Add OAuthConfigObject file": {
		"prefix": "oauthconfig",
		"scope": "csharp",
		"body": [
			"c.OAuthConfigObject = new OAuthConfigObject()",
			"{",
			"\tClientId = \"interactive.public\",",
			"\tClientSecret = \"secret\",",
			"\tUsePkceWithAuthorizationCodeGrant = true,",
			"};"
		]
	},
	"Add documentation file": {
		"prefix": "docfile",
		"body": [
			"<ItemGroup>",
			"\t<None Update=\"OpenApi.xml\">",
			"\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
			"\t</None>",
			"</ItemGroup>"
		]
	},
	"Generator Versions": {
		"prefix": "genversions",
		"scope": "csharp",
		"body": [
			"foreach (var apiVersion in ApiVersions)",
			"{",
			"\tvar versionString = $\"v{apiVersion}\";",
			"",
			"\tc.SwaggerDoc(versionString, new OpenApiInfo()",
			"\t{",
			"\t\tTitle = $\"OpenAPI Sample API {versionString}\",",
			"\t\tVersion = versionString,",
			"\t\tDescription = \"Sample API for an OpenAPI conference talk.\",",
			"\t\tContact = new SampleApiContact(),",
			"\t\tLicense = new SampleApiLicense(),",
			"\t});",
			"}"
		]
	},
	"UI Versions": {
		"prefix": "uiversions",
		"scope": "csharp",
		"body": [
			"foreach (var apiVersion in ApiVersions)",
			"{",
			"\tc.SwaggerEndpoint($\"/swagger/v{apiVersion}/swagger.json\", $\"OpenAPI Sample API v{apiVersion}\");",
			"}"
		]
	},
}
